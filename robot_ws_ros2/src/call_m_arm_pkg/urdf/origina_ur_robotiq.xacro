<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="call_m_arm">
   <!-- robot name parameter -->
   <xacro:arg name="name" default="ur"/>
   <!-- import main macro -->
   <xacro:include filename="$(find ur_description)/urdf/ur_macro.xacro"/>

   <!-- possible 'ur_type' values: ur3, ur3e, ur5, ur5e, ur10, ur10e, ur16e, ur20, ur30 -->
   <!-- the default value should raise an error in case this was called without defining the type -->
   <xacro:arg name="ur_type" default="ur5e"/>

   <!-- parameters -->
   <xacro:arg name="tf_prefix" default="" />
   <xacro:arg name="joint_limit_params" default="$(find ur_description)/config/$(arg ur_type)/joint_limits.yaml"/>
   <xacro:arg name="kinematics_params" default="$(find ur_description)/config/$(arg ur_type)/default_kinematics.yaml"/>
   <xacro:arg name="physical_params" default="$(find ur_description)/config/$(arg ur_type)/physical_parameters.yaml"/>
   <xacro:arg name="visual_params" default="$(find ur_description)/config/$(arg ur_type)/visual_parameters.yaml"/>
   <xacro:arg name="transmission_hw_interface" default=""/>
   <xacro:arg name="safety_limits" default="false"/>
   <xacro:arg name="safety_pos_margin" default="0.15"/>
   <xacro:arg name="safety_k_position" default="20"/>
   <!-- ros2_control related parameters -->
   <xacro:arg name="headless_mode" default="false" />
   <xacro:arg name="robot_ip" default="0.0.0.0" />
   <xacro:arg name="script_filename" default=""/>
   <xacro:arg name="output_recipe_filename" default=""/>
   <xacro:arg name="input_recipe_filename" default=""/>
   <xacro:arg name="reverse_ip" default="0.0.0.0"/>
   <xacro:arg name="script_command_port" default="50004"/>
   <xacro:arg name="reverse_port" default="50001"/>
   <xacro:arg name="script_sender_port" default="50002"/>
   <xacro:arg name="trajectory_port" default="50003"/>
   <!--   tool communication related parameters-->
   <xacro:arg name="use_tool_communication" default="false" />
   <xacro:arg name="tool_voltage" default="0" />
   <xacro:arg name="tool_parity" default="0" />
   <xacro:arg name="tool_baud_rate" default="115200" />
   <xacro:arg name="tool_stop_bits" default="1" />
   <xacro:arg name="tool_rx_idle_chars" default="1.5" />
   <xacro:arg name="tool_tx_idle_chars" default="3.5" />
   <xacro:arg name="tool_device_name" default="/tmp/ttyUR" />
   <xacro:arg name="tool_tcp_port" default="54321" />

     <!-- Simulation parameters -->
   <xacro:arg name="use_fake_hardware" default="false" />
   <xacro:arg name="fake_sensor_commands" default="false" />
   <xacro:arg name="sim_gazebo" default="false" />
   <xacro:arg name="sim_ignition" default="false" />
   <xacro:arg name="simulation_controllers" default="" />

   <!-- initial position for simulations (Fake Hardware, Gazebo, Ignition) -->
   <xacro:arg name="initial_positions_file" default="$(find ur_description)/config/initial_positions.yaml"/>

   <!-- convert to property to use substitution in function -->
   <xacro:property name="initial_positions_file" default="$(arg initial_positions_file)"/>

  <!-- Create the box link -->
  <link name="box-link">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="0.8 0.6 0.64"/> <!-- 80x60x64 cm in meters -->
        </geometry>
        <material name="Grey">
            <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
    </visual>
    <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="0.8 0.6 0.64"/>
        </geometry>
    </collision>
    <inertial>
        <mass value="5.0"/> <!-- Adjust mass as needed -->
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/> <!-- Adjust inertia as needed -->
    </inertial>
  </link>



   <!-- arm -->
   <xacro:ur_robot
     name="$(arg name)"
     tf_prefix="$(arg tf_prefix)"
     parent="box-link"
     joint_limits_parameters_file="$(arg joint_limit_params)"
     kinematics_parameters_file="$(arg kinematics_params)"
     physical_parameters_file="$(arg physical_params)"
     visual_parameters_file="$(arg visual_params)"
     transmission_hw_interface="$(arg transmission_hw_interface)"
     safety_limits="$(arg safety_limits)"
     safety_pos_margin="$(arg safety_pos_margin)"
     safety_k_position="$(arg safety_k_position)"
     use_fake_hardware="$(arg use_fake_hardware)"
     fake_sensor_commands="$(arg fake_sensor_commands)"
     sim_gazebo="$(arg sim_gazebo)"
     sim_ignition="$(arg sim_ignition)"
     headless_mode="$(arg headless_mode)"
     initial_positions="${xacro.load_yaml(initial_positions_file)}"
     use_tool_communication="$(arg use_tool_communication)"
     tool_voltage="$(arg tool_voltage)"
     tool_parity="$(arg tool_parity)"
     tool_baud_rate="$(arg tool_baud_rate)"
     tool_stop_bits="$(arg tool_stop_bits)"
     tool_rx_idle_chars="$(arg tool_rx_idle_chars)"
     tool_tx_idle_chars="$(arg tool_tx_idle_chars)"
     tool_device_name="$(arg tool_device_name)"
     tool_tcp_port="$(arg tool_tcp_port)"
     robot_ip="$(arg robot_ip)"
     script_filename="$(arg script_filename)"
     output_recipe_filename="$(arg output_recipe_filename)"
     input_recipe_filename="$(arg input_recipe_filename)"
     reverse_ip="$(arg reverse_ip)"
     script_command_port="$(arg script_command_port)"
     reverse_port="$(arg reverse_port)"
     script_sender_port="$(arg script_sender_port)"
     trajectory_port="$(arg trajectory_port)"
     >
     <origin xyz="0.14 0 0.32" rpy="0 0 1.57" />          <!-- position robot in the world -->
   </xacro:ur_robot>

   <xacro:if value="$(arg sim_gazebo)">
    <!-- Gazebo plugins -->
    <gazebo reference="world">
    </gazebo>
    <gazebo>
      <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
        <parameters>$(arg simulation_controllers)</parameters>
      </plugin>
    </gazebo>
  </xacro:if>

  <xacro:if value="$(arg sim_ignition)">
    <!-- Gazebo plugins -->
    <gazebo reference="world">
    </gazebo>
    <gazebo>
      <plugin filename="libign_ros2_control-system.so" name="ign_ros2_control::IgnitionROS2ControlPlugin">
        <parameters>$(arg simulation_controllers)</parameters>
        <controller_manager_node_name>$(arg tf_prefix)controller_manager</controller_manager_node_name>
      </plugin>
    </gazebo>
  </xacro:if>

  <link name="camera_link">
    <visual>
      <origin xyz="0.14 0.23 0.32" rpy="0 0 1.57"/>
      <geometry>
        <box size="0.0 0.0 0.0"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0.14 0.23 0.32" rpy="0 0 1.57"/>
      <geometry>
        <box size="0.0 0.0 0.0"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0.14 0.23 0.32" rpy="0 0 1.57"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

  <joint name="base-camera" type="fixed">
    <origin rpy="0.0 0.0 0.0" xyz="0.2 0.0 0.0"/>
    <parent link="base_link"/>
    <child link="camera_link"/>
  </joint>

  <link name="3d_camera_link"/>

  <joint name="camera_link-3d_camera_link" type="fixed">
    <origin rpy="-1.57 0 -1.57" xyz="0 0 0"/>
    <parent link="camera_link"/>
    <child link="3d_camera_link"/>
  </joint>



  <gazebo reference="camera_link">
    <material>Gazebo/Red</material>

    <sensor name="camera" type="depth">
        <pose> 0 0 0 0 0 0 </pose>
        <visualize>true</visualize>
        <update_rate>10</update_rate>
        <camera>
          <visualize>true</visualize>
            <horizontal_fov>1.089</horizontal_fov>
            <image>
                <format>B8G8R8</format>
                <width>640</width>
                <height>480</height>
            </image>
            <clip>
                <near>0.05</near>
                <far>8.0</far>
            </clip>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <visualize>true</visualize>
            <frame_name>3d_camera_link</frame_name>
            <min_depth>0.1</min_depth>
            <max_depth>100.0</max_depth>
        </plugin>
    </sensor>
</gazebo>

  <!-- Include the bracket Xacro -->
  <xacro:include filename="$(find call_m_arm_pkg)/urdf/zed_bracket.xacro"/>

  <!-- Call the bracket Xacro with specified arguments -->
  <xacro:zed_bracket
      parent_link="tool0"           
      bracket_x="0.0"                   
      bracket_y="0.0"                  
      bracket_z="0.0"                    
      bracket_roll="4.71"                
      bracket_pitch="4.71"              
      bracket_yaw="0.0" />                 

  ;<!-- Add end effector zed camera-->

  <link name="zed_eef_link"/>

  <joint name="zed_eef_joint" type="fixed">
    <origin rpy="0 0 -0.78" xyz="0.015 -0.0582 0"/>
    <parent link="bracket_link"/>
    <child link="zed_eef_link"/>
  </joint>

  <link name="zed_eef_camera_link">
    <visual>
       <origin xyz="0 0 0" rpy="0 0 0"/>
       <geometry>
          <box size="0 0 0"/> <!-- Make it invisible if no visualization is needed -->
       </geometry>
    </visual>
 </link>
 
 <joint name="zed_eef_to_camera" type="fixed">
    <parent link="zed_eef_link"/>
    <child link="zed_eef_camera_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/> <!-- Placeholder transform -->
 </joint> 

  <link name="zed_eef_FOV"/>
  
  <joint name="zed_eef_link-zed_eef_FOV" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="zed_eef_link"/>
    <child link="zed_eef_FOV"/>
  </joint>
  <!-- <xacro:include filename="$(find robotiq_description)/urdf/ur_to_robotiq_adapter.urdf.xacro"/> -->

  <!-- <xacro:ur_to_robotiq prefix="ur_" parent="bracket_link" child="gripper_link" rotation="1.57"/>        -->

  <xacro:include filename="$(find robotiq_description)/urdf/robotiq_2f_85_macro.urdf.xacro" />

  <xacro:robotiq_gripper name="RobotiqGripperHardwareInterface" prefix="" parent="tool0" use_fake_hardware="$(arg use_fake_hardware)" sim_ignition="true">
    <origin xyz="0 0 0" rpy="0.0 0 1.57" />
</xacro:robotiq_gripper>

</robot>