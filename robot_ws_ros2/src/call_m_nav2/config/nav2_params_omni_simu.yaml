amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 360 #default = 60
    max_particles: 5000 #default = 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::OmniMotionModel" #AMCL need to compute position by concidering that the robot is omnidirectionnal
    save_pose_rate: 5.0 #default = 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.1 #default = 0.2
    update_min_d: 0.1 #default = 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: /scan 

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    default_nav_to_pose_bt_xml: $(find-pkg-share call_m_nav2)/behavior_trees/navigate_to_pose_w_replanning_and_recovery_fast_n_clear.xml # or $(find-pkg-share my_package)/behavior_tree/my_nav_to_pose_bt.xml
    default_nav_through_poses_bt_xml: $(find-pkg-share call_m_nav2)/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml # or $(find-pkg-share my_package)/behavior_tree/my_nav_through_poses_bt.xml
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

# controller_server: #DWB Controller
#   ros__parameters:
#     use_sim_time: True
#     controller_frequency: 20.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.001 #(Changed for omnidirectionnal behavior)
#     min_theta_velocity_threshold: 0.001
#     failure_tolerance: 0.5
#     progress_checker_plugin: "progress_checker"
#     goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
#     controller_plugins: ["FollowPath"]

#     # Progress checker parameters
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     # Goal checker parameters
#     #precise_goal_checker:
#     #  plugin: "nav2_controller::SimpleGoalChecker"
#     #  xy_goal_tolerance: 0.25
#     #  yaw_goal_tolerance: 0.25
#     #  stateful: True
#     general_goal_checker:
#       stateful: True
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.25
#       yaw_goal_tolerance: 0.25
#     # DWB parameters
#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: True
#       min_vel_x: -0.8
#       min_vel_y: -0.8 #(Changed for omnidirectionnal behavior)
#       max_vel_x: 0.8
#       max_vel_y: 0.8 #(Changed for omnidirectionnal behavior)
#       max_vel_theta: 0.2
#       min_speed_xy: -0.8
#       max_speed_xy: 0.8
#       min_speed_theta: -0.2
#       # Add high threshold velocity for turtlebot 3 issue.
#       # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
#       acc_lim_x: 0.6
#       acc_lim_y: 0.6 #(Changed for omnidirectionnal behavior)
#       acc_lim_theta: 0.3
#       decel_lim_x: -2.0
#       decel_lim_y: -2.0 #(Changed for omnidirectionnal behavior)
#       decel_lim_theta: -2.0
#       vx_samples: 20
#       vy_samples: 20 #(Changed for omnidirectionnal behavior)
#       vtheta_samples: 20 
#       sim_time: 1.7
#       linear_granularity: 0.05
#       angular_granularity: 0.025
#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.25
#       trans_stopped_velocity: 0.25
#       short_circuit_trajectory_evaluation: True
#       stateful: True
#       critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "PathDist", "GoalDist","Twirling"] #(Changed for omnidirectionnal behavior) Twirling added, PathAlign and GoalAlign removed
#       # critics: ["RotateToGoal", "Oscillation", "ObstacleFootprint", "PathDist", "GoalDist","Twirling"] #(Changed for non circular shape) replaced BaseObstacle with ObstacleFootprintCritic
#       BaseObstacle.scale: 0.02 # circular robot
#       # ObstacleFootprint.scale: 15.0 #non circular robot
#       #PathAlign.scale: 32.0 #(Changed for omnidirectionnal behavior)
#       #PathAlign.forward_point_distance: 0.1 #(Changed for omnidirectionnal behavior)
#       #GoalAlign.scale: 24.0 #(Changed for omnidirectionnal behavior)
#       #GoalAlign.forward_point_distance: 0.1 #(Changed for omnidirectionnal behavior)
#       PathDist.scale: 32.0
#       GoalDist.scale: 24.0
#       RotateToGoal.scale: 32.0
#       RotateToGoal.slowing_factor: 5.0
#       RotateToGoal.lookahead_time: -1.0
#       Twirling.scale: 1.0 #(Changed for omnidirectionnal behavior) Added

controller_server: #MPPI controller
  ros__parameters:
    controller_frequency: 30.0
    use_sim_time: True
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 0.8
      vx_min: -0.8
      vy_max: 0.8
      wz_max: 1.9
      ax_max: 3.0
      ax_min: -3.0
      ay_max: 3.0
      az_max: 3.5
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "Omni"
      visualize: false
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: false
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      # AckermannConstraints:
      #   min_turning_r: 0.2
      critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathFollowCritic", "PathAngleCritic", "ObstaclesCritic", "TwirlingCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.4
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5
      # PreferForwardCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   threshold_to_consider: 0.5
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 15.0
        critical_weight: 20.0
        consider_footprint: false
        collision_cost: 10000.0
        collision_margin_distance: 0.3
        near_goal_distance: 0.5
        inflation_radius: 0.5 # (only in Humble)
        cost_scaling_factor: 3.0 # (only in Humble)
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0
        consider_footprint: false
        collision_cost: 1000000.0
        near_goal_distance: 1.0
        trajectory_point_step: 2
      # PathAlignCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 14.0
      #   max_path_occupancy_ratio: 0.05
      #   trajectory_point_step: 4
      #   threshold_to_consider: 0.5
      #   offset_from_furthest: 20
      #   use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 1.4
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        mode: 0
      # VelocityDeadbandCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 35.0
      #   deadband_velocities: [0.05, 0.05, 0.05]
      TwirlingCritic:
        enabled: true
        twirling_cost_power: 1
        twirling_cost_weight: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0  #(default = 5.0)
      publish_frequency: 10.0 #(default = 2.0)
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true 
      width: 4 #(default = 3.0)
      height: 4 #(default = 3.0)
      resolution: 0.05
      robot_radius: 0.5050 #0.36
      footprint: "[[0.2425,0.5025],[0.2425,-0.2425],[-0.2425,-0.2425],[-0.2425,0.5025]]"
      plugins: ["obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.65
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: merged_scan #merged_scan lid1 lid2 cam1 cam2
        merged_scan:
          topic: /scan
          max_obstacle_height: 1.5
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 12.0  #(default = 2.5)
          obstacle_min_range: 0.0
        lid1:
          topic: /lidar1/scan
          max_obstacle_height: 1.5
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 12.0  #(default = 2.5)
          obstacle_min_range: 0.0
        lid2:
          topic: /lidar2/scan
          max_obstacle_height: 1.5
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 12.0  #(default = 2.5)
          obstacle_min_range: 0.0
        cam1:
          topic: /cam1/zed_node/point_cloud/cloud_registered
          max_obstacle_height: 1.5
          min_obstacle_height: 0.02
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 8.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 8.0 #(default = 2.5)
          obstacle_min_range: 0.0
        cam2:
          topic: /cam2/zed_node/point_cloud/cloud_registered
          max_obstacle_height: 1.5
          min_obstacle_height: 0.02
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 8.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 8.0 #(default = 2.5)
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 10.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.5050 #we keep circle footprint for global planning, because as it omnidirectionnal, the robot should be able to manage with its shap locally
      footprint: "[[0.2425,0.5025],[0.2425,-0.2425],[-0.2425,-0.2425],[-0.2425,0.5025]]"
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: merged_scan #merged_scan lid1 lid2 cam1 cam2 
        merged_scan:
          topic: /scan
          max_obstacle_height: 1.5
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 12.0  #(default = 2.5)
          obstacle_min_range: 0.0
        lid1:
          topic: /lidar1/scan
          max_obstacle_height: 1.5
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 12.0  #(default = 2.5)
          obstacle_min_range: 0.0
        lid2:
          topic: /lidar2/scan
          max_obstacle_height: 1.5
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 12.0  #(default = 2.5)
          obstacle_min_range: 0.0
        cam1:
          topic: /cam1/zed_node/point_cloud/cloud_registered
          max_obstacle_height: 1.5
          min_obstacle_height: 0.02
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 8.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 8.0 #(default = 2.5)
          obstacle_min_range: 0.0
        cam2:
          topic: /cam2/zed_node/point_cloud/cloud_registered
          max_obstacle_height: 1.5
          min_obstacle_height: 0.02
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 8.0  #(default = 3.0)
          raytrace_min_range: 0.0
          obstacle_max_range: 8.0 #(default = 2.5)
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.7
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     use_sim_time: True
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner"
#       tolerance: 0.5
#       use_astar: false
#       allow_unknown: true

planner_server:   #Planner for non circular shapes
 ros__parameters:
   expected_planner_frequency: 20.0
   planner_plugins: ["GridBased"]
   use_sim_time: True

   GridBased:
     plugin: "nav2_smac_planner/SmacPlannerLattice" # In Iron and older versions, "/" was used instead of "::"
     allow_unknown: true                 # Allow traveling in unknown space
     tolerance: 0.50                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
     max_iterations: 1000000             # Maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
     max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
     max_planning_time: 5.0              # Max time in s for planner to plan, smooth
     analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
     analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
     analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
     analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
     reverse_penalty: 2.0                # Penalty to apply if motion is reversing, must be => 1
     change_penalty: 0.05                # Penalty to apply if motion is changing directions (L to R), must be >= 0
     non_straight_penalty: 1.05          # Penalty to apply if motion is non-straight, must be => 1
     cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
     rotation_penalty: 5.0               # Penalty to apply to in-place rotations, if minimum control set contains them
     retrospective_penalty: 0.015
     lattice_filepath: "/home/jrluser/Documents/GitHub/CALL-M_core/robot_ws_ros2/src/call_m_nav2/Lattice_files/5cm_resolution/0.3m_turning_radius/omni/output.json"                # The filepath to the state lattice graph
     lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
     cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
     allow_reverse_expansion: false      # If true, allows the robot to use the primitives to expand in the mirrored opposite direction of the current robot's orientation (to reverse).
     smooth_path: true                   # If true, does a simple and quick smoothing post-processing to the path
     smoother:
       max_iterations: 1000
       w_smooth: 0.3
       w_data: 0.2
       tolerance: 1.0e-10
       do_refinement: true
       refinement_num: 2

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.3
    min_rotational_vel: 0.1
    rotational_acc_lim: 0.3
    #cmd_vel_teleop: cmd_vel_teleop #assissted teleop parameter, default = cmd_vel_teleop

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [1.0, 1.0, 1.0]
    min_velocity: [-1.0, -1.0, -1.0] 
    max_accel: [1.0, 1.0, 1.0] 
    max_decel: [-1.0, -1.0, -1.0]
    odom_topic: "odometry/filtered"
    odom_duration: 0.1
    deadband_velocity: [0.1, 0.1, 0.1]
    velocity_timeout: 1.0