<?xml version="1.0"?>
<robot name="bot" xmlns:xacro="http://ros.org/wiki/xacro">

	<!-- Define robot constants -->
	<!-- If changed, check also 'simu_bot_driver.cpp' for publish_command() -->
	<!-- If need to change orientation, just change wheels, see wheels positions below + check lidars posiions and orientation in 'lidars_description.urdf.xacro'-->
	<xacro:property name="square1_length" value="0.48"/>
	<xacro:property name="square1_height" value="0.03"/> 
	<xacro:property name="square2_length" value="0.277"/>
	<xacro:property name="square2_height" value="0.072"/> 
	<xacro:property name="square3_height" value="0.36"/>
	<xacro:property name="support1_width" value="0.26"/>
	<xacro:property name="support2_height" value="0.33"/>

	<xacro:property name="wheels_radius" value="0.05"/> 
	<xacro:property name="triangle_lenght" value="0.32"/> <!-- Side's Triangle length-->
	<xacro:property name="wheels_distance" value="${sqrt(((3*(triangle_lenght**4))/16)+((triangle_lenght**2)/4))}"/> <!-- Radius between origin and wheels-->
	<xacro:property name="wheels_zoffset" value="0.03"/>

	<!-- Define some commonly used intertial properties  -->
	<xacro:macro name="box_inertia" params="m w h d">
		<inertial>
		<origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>      
		<mass value="${m}"/>
		<inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
		</inertial>
	</xacro:macro>

	<xacro:macro name="cylinder_inertia" params="m r h">
		<inertial>
		<origin xyz="0 0 0" rpy="${pi/2} 0 0" />      
		<mass value="${m}"/>
		<inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> 
		</inertial>
	</xacro:macro>

	<xacro:macro name="sphere_inertia" params="m r">
		<inertial>
		<mass value="${m}"/>
		<inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
		</inertial>
	</xacro:macro>

	<!-- Robot Base -->
	<!-- Dummy link may need to be added because KDL does not support root link with inertia. But simulation not working with it-->
	<!--<link name="dummy"></link>
	<joint name="init_joint" type="fixed">
		<parent link="dummy"/>
		<child link="base_link"/>
		<origin xyz="0.0 0.0 ).0}" rpy="0 0 0"/>
	</joint>
	-->
	
	<link name="base_link">
		<visual>
		<geometry>
			<box size="${square1_length} ${square1_length} ${square1_height}"/>
		</geometry>
		<material name="Cyan">
			<color rgba="0 1.0 1.0 1.0"/>
		</material>
		</visual>
		<collision>
		<geometry>
			<box size="${square1_length} ${square1_length} ${square1_height}"/>
		</geometry>
		</collision>
		<xacro:box_inertia m="15" w="${square1_length}" d="${square1_length}" h="${square1_height}"/>
	</link>

	<!-- Others Robot structures -->
	<link name="base2_link">
		<visual>
		<geometry>
			<box size="${square2_length} ${square2_length} ${square2_height}"/>
		</geometry>
		<material name="Cyan">
			<color rgba="0 1.0 1.0 1.0"/>
		</material>
		</visual>
		<collision>
		<geometry>
			<box size="${square2_length} ${square2_length} ${square2_height*0.8}"/>
		</geometry>
		</collision>
		<xacro:box_inertia m="0.5" w="${square2_length}" d="${square2_length}" h="${square2_height}"/>
	</link>
	<joint name="base2_joint" type="fixed">
		<parent link="base_link"/>
		<child link="base2_link"/>
		<origin xyz="0.0 0.0 ${(square1_height/2)+(square2_height/2)}" rpy="0 0 0"/>
	</joint>

	<link name="support1_link">
		<visual>
		<geometry>
			<box size="${square1_length} ${support1_width} ${square1_height}"/>
		</geometry>
		<material name="Cyan">
			<color rgba="0 1.0 1.0 1.0"/>
		</material>
		</visual>
		<collision>
		<geometry>
			<box size="${square1_length} ${support1_width} ${square1_height}"/>
		</geometry>
		</collision>
		<xacro:box_inertia m="0.5" w="${square1_length}" d="${support1_width}" h="${square1_height}"/>
	</link>
	<joint name="support1_joint" type="fixed">
		<parent link="base3_link"/>
		<child link="support1_link"/>
		<origin xyz="0.0 ${square1_length/2 + support1_width/2} ${square1_height/2 - square3_height/2}" rpy="0 0 0"/>
	</joint>

	<link name="support2_link">
		<visual>
		<geometry>
			<box size="${square1_length} ${square1_height} ${support2_height}"/>
		</geometry>
		<material name="Cyan">
			<color rgba="0 1.0 1.0 1.0"/>
		</material>
		</visual>
		<collision>
		<geometry>
			<box size="${square1_length} ${square1_height} ${support2_height}"/>
		</geometry>
		</collision>
		<xacro:box_inertia m="0.5" w="${square1_length}" d="${square1_height}" h="${support2_height}"/>
	</link>
	<joint name="support2_joint" type="fixed">
		<parent link="support1_link"/>
		<child link="support2_link"/>
		<origin xyz="0.0 ${support1_width/2 - square1_height/2} ${support2_height/2 + square1_height/2}" rpy="0 0 0"/>
	</joint>

	<link name="base3_link">
		<visual>
		<geometry>
			<box size="${square1_length} ${square1_length} ${square3_height}"/>
		</geometry>
		<material name="Cyan">
			<color rgba="0 1.0 1.0 1.0"/>
		</material>
		</visual>
		<collision>
		<geometry>
			<box size="${square1_length} ${square1_length} ${square3_height}"/>
		</geometry>
		</collision>
		<xacro:box_inertia m="0.5" w="${square1_length}" d="${square1_length}" h="${square3_height}"/>
	</link>
	<joint name="base3_joint" type="fixed">
		<parent link="base_link"/>
		<child link="base3_link"/>
		<origin xyz="0.0 0.0 ${(square1_height/2)+square2_height+(square3_height/2)}" rpy="0 0 0"/>
	</joint>

	<link name="base4_link">
		<visual>
		<geometry>
			<box size="${square1_length/4} ${square1_length/30} ${0.04}"/>
		</geometry>
		<material name="Green">
			<color rgba="1.0 0.0 1.0 1.0"/>
		</material>
		</visual>
	</link>
	<joint name="base4_joint" type="fixed">
		<parent link="base3_link"/>
		<child link="base4_link"/>
		<origin xyz="${square1_length/2-square1_length/4} 0.0 ${(square3_height/2)+0.02}" rpy="0 0 0"/>
	</joint>

	<!-- Robot Footprint-->
	<link name="base_footprint">
		<xacro:box_inertia m="0" w="0" d="0" h="0"/>
	</link>

	<joint name="base_joint" type="fixed">
		<parent link="base_link"/>
		<child link="base_footprint"/>
		<origin xyz="0.0 0.0 ${-(wheels_radius*2+wheels_zoffset+square1_height/2)}" rpy="0 0 0"/>
	</joint>

	  <!-- 3 Wheels and there support to simulate sphere joint -->
	<xacro:macro name="wheel" params="prefix angle type">

		<!--wheel support-->
		<link name="${prefix}_sup_link">
		<visual>
			<geometry>
				<cylinder radius="${wheels_radius}" length="${wheels_zoffset}"/>
			</geometry>
			<material name="Gray">
			<color rgba="0.5 0.5 0.5 1.0"/>
			</material>
		</visual>
		<collision>
			<geometry>
			<cylinder radius="${wheels_radius}" length="${wheels_zoffset/2}"/>
			</geometry>
		</collision>
		<xacro:cylinder_inertia m="2" r="${wheels_radius}" h="${wheels_zoffset}"/>
		</link>
		<joint name="${prefix}_sup_joint" type="continuous">
			<parent link="base_link"/>
			<child link="${prefix}_sup_link"/>
			<origin xyz="${wheels_distance*cos(angle)} ${wheels_distance*sin(angle)} ${-((wheels_zoffset/2)+(square1_height/2))}" rpy="0 0 0"/>
			<axis xyz="0 0 1"/>

		</joint>

		<!--wheel-->
		<link name="${prefix}_link">
		<visual>
			<geometry>
				<sphere radius="${wheels_radius}"/>
			</geometry>
			<material name="Gray">
			<color rgba="0.5 0.5 0.5 1.0"/>
			</material>
		</visual>
		<xacro:if value="${type == 'sphere'}">
			<collision>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<sphere radius="${wheels_radius}"/>
			</geometry>
			</collision>
			<xacro:sphere_inertia m="0.5" r="${wheels_radius}"/>
		</xacro:if>
		<xacro:if value="${type == 'cylinder'}">
			<collision>
			<origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
			<geometry>
				<cylinder radius="${wheels_radius}" length="${wheels_radius*2}"/>
			</geometry>
			</collision>
			<xacro:cylinder_inertia m="0.5" r="${wheels_radius}" h="${wheels_radius*2}"/>
		</xacro:if>
		</link>
		<joint name="${prefix}_joint" type="continuous">
			<parent link="${prefix}_sup_link"/>
			<child link="${prefix}_link"/>
			<origin xyz="0.0 0.0 ${-wheels_radius-wheels_zoffset/2}" rpy="0 0 0"/>
			<axis xyz="0 1 0"/>
		</joint>

	</xacro:macro>

	<xacro:wheel prefix="wheel_2" angle="${pi}" type="sphere" />
	<xacro:wheel prefix="wheel_3" angle="${(2*pi/3)+pi}" type="sphere" />
	<xacro:wheel prefix="wheel_1" angle="${(-2*pi/3)+pi}" type="sphere" />

	<xacro:include filename="lidars_description.urdf.xacro"/>
	<xacro:include filename="cameras_description_former.urdf.xacro"/>
	<!--The simulated IMU seems to be noisy too much even with no noise set, so we don't use it for linear movement-->
	<xacro:include filename="imu_description.urdf.xacro"/>
	<xacro:include filename="gazebo_template.urdf.xacro"/>
	<xacro:include filename="ros2_control.xacro"/>

	<gazebo reference="base4_link">
		<material>Gazebo/Purple</material>
	</gazebo>

	<!--Keep this at the end, Used as debug, whrn changing the color we can know if the model loaded by gazebo is really this one 
	or a previous working version.if the color of base2_link match the color specified on Gazebo, then everything worked correctly-->
	<gazebo reference="base2_link">
		<material>Gazebo/Green</material>
	</gazebo>

</robot>