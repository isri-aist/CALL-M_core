<!-- 
This file is not used. It contains pieces of codes that could be useful in the future or that have been deleted.
Can be used as a backup for pieces of code.
-->

<!-- Dummy link may need to be added because KDL does not support root link with inertia. But simulation not working with it-->
<!--<link name="dummy"></link>
<joint name="init_joint" type="fixed">
	<parent link="dummy"/>
	<child link="base_link"/>
	<origin xyz="0.0 0.0 ).0}" rpy="0 0 0"/>
</joint>
-->

<!-- Robot Support, to be deleted want controlling -->
<link name="base_sup_link">
    <visual>
    <geometry>
        <cylinder radius="${wheels_radius}" length="${wheels_radius+wheels_zoffset+0.1}"/>
    </geometry>
    <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
    </material>
    </visual>
    <collision>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
        <cylinder radius="${wheels_radius}" length="${wheels_radius*2}"/>
    </geometry>
    </collision>
    <xacro:cylinder_inertia m="20" r="${wheels_radius}" h="${wheels_radius+wheels_zoffset+0.1}"/>
</link>
<joint name="$base_sup_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_sup_link"/>
    <origin xyz="0.0 0.0 ${-((wheels_radius+wheels_zoffset+0.1)/2+(square1_height/2))}" rpy="0 0 0"/>
</joint>

<!-- Robot Support, to be deleted want controlling -->
    <!--Transmission objects for gazebo control-->
    <transmission name="${prefix}_tran">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="${prefix}_joint">
            <hardwareInterface>EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="${prefix}_actuator">
            <hardwareInterface>EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>

    <transmission name="${prefix}_sup_tran">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="${prefix}_sup_joint">
            <hardwareInterface>EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="${prefix}_sup_actuator">
            <hardwareInterface>EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>


<!-- This plugin will read a JointTrajectory message from the /set_joint_trajectory topic 
        and move the machine accordingly. It's a bit clunky but it works. -->
<!-- You'll probably want to add damping to the joints to stop them it flopping around. 
        e.g. <dynamics damping="10.0" friction="10.0"/> -->
<!-- Here's an example message to publish to test it:
ros2 topic pub -1 /set_joint_trajectory trajectory_msgs/msg/JointTrajectory  '{header: {frame_id: base_link}, joint_names: [wheel_2_sup_joint,wheel_3_sup_joint,wheel_1_sup_joint,wheel_2_joint,wheel_3_joint,wheel_1_joint], points: [  {positions: {0.8,0.6,0.8,0.6,0.8,0.6}} ]}'
    -->
<gazebo>
    <plugin name="gazebo_ros_joint_pose_trajectory"
        filename="libgazebo_ros_joint_pose_trajectory.so">
        <update_rate>2</update_rate>
    </plugin>
</gazebo>


<!--SAV camera objects-->

	<!--2 CAMERA-->
	<!--camera object front-->
	<link name="cam1_link">
		<visual>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<geometry>
			<box size="0.015 0.130 0.022"/>
		</geometry>
		</visual>

		<collision>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<geometry>
			<box size="0.015 0.130 0.022"/>
		</geometry>
		</collision>

		<inertial>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<mass value="0.035"/>
		<inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
		</inertial>
	</link>

	<joint name="cam1_joint" type="continuous">
		<parent link="base3_link"/>
		<child link="cam1_link"/>
		<origin xyz="${(square1_length/2)+0.015/2} 0.0 ${(square3_height/2)-0.03-0.022/2}" rpy="0.0 0.0 0.0"/>
		<axis xyz="0 1 0"/>
	</joint>

	<!--depth camera front-->
	<link name="cam1_depth_frame"/>

	<joint name="cam1_depth_joint" type="fixed">
		<origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
		<parent link="cam1_link"/>
		<child link="cam1_depth_frame"/>
	</joint>

	<gazebo reference="cam1_link">
		<!-- Gazebo is unable to use the same <material> tags that are already in the URDF (that RViz uses). -->
    	<!-- Instead, we need to add gazebo tags for our links that refer to Gazebo materials -->
        <material>Gazebo/Orange</material>
		<sensor type="depth" name="cam1">
		<update_rate>100</update_rate>
		<camera name="cam1_cam">
			<horizontal_fov>1.6</horizontal_fov>
			<image>
			<width>800</width>
			<height>800</height>
			<format>R8G8B8</format>
			</image>
			<clip>
			<near>0.02</near>
			<far>3</far>
			</clip>
			<noise>
			<type>gaussian</type>
			<mean>0.0</mean>
			<stddev>0.007</stddev>
			</noise>
		</camera>
		<plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
			<!--/cam1/zed_node/rgb/image_rect_color-->
		    <ros>
                <namespace>cam1</namespace>
                <remapping>cam1/image_raw:=zed_node/rgb/image_rect_color</remapping>
                <remapping>cam1/depth/image_raw:=depth/image_rect_raw</remapping>
                <remapping>cam1/camera_info:=camera_info</remapping>
                <remapping>cam1/depth/camera_info:=depth/camera_info</remapping>
                <remapping>cam1/points:=depth/points</remapping>
            </ros>
			<baseline>0.2</baseline>
			<alwaysOn>true</alwaysOn>
			<updateRate>0.0</updateRate>
			<frame_name>cam1_depth_frame</frame_name>
			<pointCloudCutoff>0.5</pointCloudCutoff>
			<pointCloudCutoffMax>3.0</pointCloudCutoffMax>
			<distortionK1>0</distortionK1>
			<distortionK2>0</distortionK2>
			<distortionK3>0</distortionK3>
			<distortionT1>0</distortionT1>
			<distortionT2>0</distortionT2>
			<CxPrime>0</CxPrime>
			<Cx>0</Cx>
			<Cy>0</Cy>
			<focalLength>0</focalLength>
			<hackBaseline>0</hackBaseline>
		</plugin>
		</sensor>
	</gazebo>

	<!--camera object back-->
	<link name="cam2_link">
		<visual>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<geometry>
			<box size="0.015 0.130 0.022"/>
		</geometry>
		</visual>

		<collision>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<geometry>
			<box size="0.015 0.130 0.022"/>
		</geometry>
		</collision>

		<inertial>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<mass value="0.035"/>
		<inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
		</inertial>
	</link>

	<joint name="cam2_joint" type="continuous">
		<parent link="base3_link"/>
		<child link="cam2_link"/>
		<origin xyz="${-((square1_length/2)+0.015/2)} 0.0 ${(square3_height/2)-0.03-0.022/2}" rpy="0.0 0.0 ${pi}"/>
		<axis xyz="0 1 0"/>
	</joint>

	<!--depth camera back-->
	<link name="cam2_depth_frame"/>

	<joint name="cam2_depth_joint" type="fixed">
		<origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
		<parent link="cam2_link"/>
		<child link="cam2_depth_frame"/>
	</joint>

	<gazebo reference="cam2_link">
		<!-- Gazebo is unable to use the same <material> tags that are already in the URDF (that RViz uses). -->
    	<!-- Instead, we need to add gazebo tags for our links that refer to Gazebo materials -->
        <material>Gazebo/Orange</material>
		<sensor type="depth" name="cam2">
		<update_rate>100</update_rate>
		<camera name="cam2_cam">
			<horizontal_fov>1.6</horizontal_fov>
			<image>
			<width>800</width>
			<height>800</height>
			<format>R8G8B8</format>
			</image>
			<clip>
			<near>0.02</near>
			<far>3</far>
			</clip>
			<noise>
			<type>gaussian</type>
			<mean>0.0</mean>
			<stddev>0.007</stddev>
			</noise>
		</camera>
		<plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
			<ros>
                <namespace>cam2</namespace>
                <remapping>cam2/image_raw:=zed_node/rgb/image_rect_color</remapping>
                <remapping>cam2/depth/image_raw:=depth/image_rect_raw</remapping>
                <remapping>cam2/camera_info:=camera_info</remapping>
                <remapping>cam2/depth/camera_info:=depth/camera_info</remapping>
                <remapping>cam2/points:=depth/points</remapping>
            </ros>
			<baseline>0.2</baseline>
			<alwaysOn>true</alwaysOn>
			<updateRate>0.0</updateRate>
			<frame_name>cam2_depth_frame</frame_name>
			<pointCloudCutoff>0.5</pointCloudCutoff>
			<pointCloudCutoffMax>3.0</pointCloudCutoffMax>
			<distortionK1>0</distortionK1>
			<distortionK2>0</distortionK2>
			<distortionK3>0</distortionK3>
			<distortionT1>0</distortionT1>
			<distortionT2>0</distortionT2>
			<CxPrime>0</CxPrime>
			<Cx>0</Cx>
			<Cy>0</Cy>
			<focalLength>0</focalLength>
			<hackBaseline>0</hackBaseline>
		</plugin>
		</sensor>
	</gazebo>

	<!--2 IMU in each camera-->
	<link name="imu_link">
		<visual>
		<geometry>
			<box size="0.01 0.01 0.01"/>
		</geometry>
		</visual>
		
		<collision>
		<geometry>
			<box size="0.01 0.01 0.01"/>
		</geometry>
		</collision>
		
		<xacro:box_inertia m="0.01" w="0.01" d="0.01" h="0.01"/>
	</link>

	<joint name="imu_joint" type="fixed">
		<parent link="base_link"/>
		<child link="imu_link"/>
		<origin xyz="0 0 0.0"/>
	</joint>
		
	<gazebo reference="imu_link">
		
		<sensor name="imu_sensor" type="imu">
		<plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
			<ros>
			<namespace>/imu</namespace>
			<remapping>~/out:=data</remapping>
			</ros>
			<initial_orientation_as_reference>false</initial_orientation_as_reference>
		</plugin>
		<always_on>true</always_on>
		<update_rate>100</update_rate>
		<visualize>true</visualize>
		<imu>
			<angular_velocity>
			<x>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>2e-4</stddev>
				<bias_mean>0.0000075</bias_mean>
				<bias_stddev>0.0000008</bias_stddev>
				</noise>
			</x>
			<y>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>2e-4</stddev>
				<bias_mean>0.0000075</bias_mean>
				<bias_stddev>0.0000008</bias_stddev>
				</noise>
			</y>
			<z>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>2e-4</stddev>
				<bias_mean>0.0000075</bias_mean>
				<bias_stddev>0.0000008</bias_stddev>
				</noise>
			</z>
			</angular_velocity>
			<linear_acceleration>
			<x>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>1.7e-2</stddev>
				<bias_mean>0.1</bias_mean>
				<bias_stddev>0.001</bias_stddev>
				</noise>
			</x>
			<y>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>1.7e-2</stddev>
				<bias_mean>0.1</bias_mean>
				<bias_stddev>0.001</bias_stddev>
				</noise>
			</y>
			<z>
				<noise type="gaussian">
				<mean>0.0</mean>
				<stddev>1.7e-2</stddev>
				<bias_mean>0.1</bias_mean>
				<bias_stddev>0.001</bias_stddev>
				</noise>
			</z>
			</linear_acceleration>
		</imu>
		</sensor>
	</gazebo>



			<!-- Camera Center -->
		<link name="${name}_camera_center">
		<visual>
			<origin xyz="${screw_offset_x} 0 ${screw_offset_z}" rpy="0 0 0"/>
			<geometry>
			<mesh filename="package://zed_interfaces/meshes/${model}.stl" />
			</geometry>
			<material name="${model}_mat" />
		</visual>
		<collision>
			<geometry>
			<mesh filename="package://zed_interfaces/meshes/${model}.stl" />
			</geometry>
		</collision>
		</link>
		<joint name="${name}_camera_center_joint" type="fixed">
		<parent link="${name}_link"/>
		<child link="${name}_camera_center"/>
		<origin xyz="0 0 ${height/2}" rpy="0 ${bottom_slope} 0" />
		</joint>

		<!-- Left Camera -->
		<link name="${name}_left_camera_frame" />
		<joint name="${name}_left_camera_joint" type="fixed">
		<parent link="${name}_camera_center"/>
		<child link="${name}_left_camera_frame"/>
		<origin xyz="${optical_offset_x} ${baseline/2} 0" rpy="0 0 0" />
		</joint>

		<link name="${name}_left_camera_optical_frame"/>
		<joint name="${name}_left_camera_optical_joint" type="fixed">
		<origin xyz="0 0 0" rpy="-${M_PI/2} 0.0 -${M_PI/2}"/>
		<parent link="${name}_left_camera_frame"/>
		<child link="${name}_left_camera_optical_frame"/>
		</joint>

		<!-- Right Camera -->
		<link name="${name}_right_camera_frame" />
		<joint name="${name}_right_camera_joint" type="fixed">
		<parent link="${name}_camera_center"/>
		<child link="${name}_right_camera_frame"/>
		<origin xyz="${optical_offset_x} -${baseline/2} 0" rpy="0 0 0" />
		</joint>

		<link name="${name}_right_camera_optical_frame"/>
		<joint name="${name}_right_camera_optical_joint" type="fixed">
		<origin xyz="0 0 0" rpy="-${M_PI/2} 0.0 -${M_PI/2}"/>
		<parent link="${name}_right_camera_frame"/>
		<child link="${name}_right_camera_optical_frame"/>
		</joint>
